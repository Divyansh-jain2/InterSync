import type { Metadata } from "next";
import localFont from "next/font/local";
import "@stream-io/video-react-sdk/dist/css/styles.css"; // Stream CSS import
import "./globals.css";
import { ClerkProvider, SignedIn, SignedOut, RedirectToSignIn } from "@clerk/nextjs"; // Import ClerkProvider
import ConvexClientProvider from "@/components/providers/ConvexClientProvider"; // Your new Convex client wrapper
import Navbar from "@/components/Navbar"; // Keep this commented out for now for testing
import { ThemeProvider } from "@/components/providers/ThemeProvider";
import { Toaster } from "react-hot-toast"; // Using react-hot-toast

const geistSans = localFont({
  src: "./fonts/GeistVF.woff", // Ensure path is relative to app directory
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff", // Ensure path is relative to app directory
  variable: "--font-geist-mono",
  weight: "100 900",
});

export const metadata: Metadata = {
  title: "Create Next App", // Customize your title
  description: "Generated by create next app", // Customize your description
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const clerkPublishableKey = process.env.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY;

  if (!clerkPublishableKey) {
    // This check runs on the server.
    console.error(
      "CRITICAL SERVER ERROR: Missing NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY. ClerkProvider will not function correctly."
    );
    // Optionally, you could throw an error here to prevent the app from starting
    // if this key is absolutely essential for any server-side logic dependent on Clerk.
    // For now, ClerkProvider will also warn on the client if the key is missing.
  }

  return (
    <ClerkProvider publishableKey={clerkPublishableKey}>
      <html lang="en" suppressHydrationWarning>
        <body
          className={`${geistSans.variable} ${geistMono.variable} antialiased`}
        >
          <ConvexClientProvider>
            <ThemeProvider
              attribute="class"
              defaultTheme="system"
              enableSystem
              disableTransitionOnChange
            >
              <SignedIn>
                <div className="min-h-screen">
                  <Navbar />
                  <main className="px-4 sm:px-6 lg:px-8">{children}</main>
                </div>
               
              </SignedIn>

              <SignedOut>
                <RedirectToSignIn />
              </SignedOut>
              <Toaster /> {/* react-hot-toast Toaster */}
            </ThemeProvider>
          </ConvexClientProvider>
        </body>
      </html>
    </ClerkProvider>
  );
}